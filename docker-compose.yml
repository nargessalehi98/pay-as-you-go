version: '3'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tr-app
    restart: always
    networks:
      - tracker
    volumes:
      - ./config:/tracker/config:ro
      - ./.env:/tracker/.env:ro
      - ./tracker:/tracker/tracker
    env_file:
      - .env
    ports:
      - "${HOST_PORT}:${CONTAINER_PORT}"
    command: sh -c "python manage.py runserver ${HOST}:${HOST_PORT}"

  db:
    image: postgres:latest
    container_name: tr-postgres
    restart: always
    networks:
      - tracker
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env

  redis:
    image: redis:latest
    container_name: tr-redis
    ports:
      - "${REDIS_HOST_PORT}:${REDIS_CONTAINER_PORT}"
    networks:
      - tracker

  rabbit:
    image: rabbitmq:latest
    container_name: tr-rabbit
    ports:
      - "${RABBIT_HOST_PORT}:${RABBIT_CONTAINER_PORT}"
    networks:
      - tracker

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tr-celery
    command: celery -A config worker -l INFO
    restart: always
    networks:
      - tracker
    volumes:
      - ./config:/tracker/config:ro
      - ./.env:/tracker/.env:ro
      - ./tracker:/tracker/tracker

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tr-celery-beat
    command: celery -A config beat -l INFO
    restart: always
    networks:
      - tracker
    volumes:
      - ./config:/tracker/config:ro
      - ./.env:/tracker/.env:ro
      - ./tracker:/tracker/tracker

networks:
  tracker: